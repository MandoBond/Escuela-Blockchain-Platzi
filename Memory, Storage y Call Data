


// SPDX-License-Identifier: GPL-3.0
 pragma solidity >=0.7.0 <0.9.0;
 
 contract Reto1{
     //Variables de estado
     bool public isFundable;
     uint256 public Goal; 
     uint256 public totalFunded;
     address owner;
     
     //Inicializamos los valores, hay que recordar que el constructor se ejecuta solo una vez cuando se crea el contrato
     //Asignamos la meta al construir el contrato
     constructor(uint _goal){
         Goal = _goal;
         owner = msg.sender;
         totalFunded = 0;
         isFundable = true;
     }
     //El modifier permite cambiar el compoprtamiento de funciones, en este caso solo queria asegurarme que solo el creador del contrato pudiera mover el Goal
     modifier onlyOwner{
         require(msg.sender == owner, "Debes ser el creador del contrato para cambiar la meta o el estado del proyecto");
         _;
     }
     //Aqui ponemos la meta a recaudar,solamente el que iniciaiza el contrato puede cambiar este valor
     function setGoal(uint256 goal) public onlyOwner {
         Goal = goal;
     }
     
     //solo el dueÃ±o del contrato puede modificar el estado del proyecto
     function changeProjectState(bool change)public onlyOwner{
         isFundable = change;
     }
     //Aqui inicia la funcion para fondear el proyecto
     function fundproject() public payable {
         //Primero evaluamos si el estado del contrato se mantiene abierto a las donaciones
         require(isFundable, "El proyecto esta cerrado para donaciones");
         //Comprobamos que el total que se ha fondeado sea menor a la meta
         require(totalFunded < Goal, "La meta ha sido alcanzada y no se puede fondear mas");
         //Despues nos aeguramos que la persona mande un minimo,en este caso arriba de 0
         require(msg.value != uint(0), "Por favor agrega mas fondos para contribuir al proyecto de Platzi");
         //Actualizamos el total que se ha fondeado al contrato
         totalFunded += msg.value;
         //Si el total fondeado supera a la meta el estado del proyecto cambia y se cierra
         if(totalFunded >= Goal)
            isFundable = false;
     }
     //Esta funcion nos sirve para que la persona pueda ver cuanto se necesita para alcanzar la meta, asi no tendra que estar adivinando cuanto depositar maximo
     function viewRemaining() public view returns(uint256){
         return Goal - totalFunded;         
     }
     
 }
